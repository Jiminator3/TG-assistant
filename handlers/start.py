from typing import Any

from aiogram import Router, F
from aiogram.filters import CommandStart, Command, CommandObject
from aiogram.types import Message
from sqlalchemy import Integer, String, TIMESTAMP

from db_handler import db_service
from filters.is_admin import IsAdmin
from keyboards.all_kb import main_kb, create_spec_kb, create_rat
from keyboards.inline_kbs import ease_link_kb, get_inline_kb, create_qst_inline_kb
from utils import get_db_options, get_db_types
from utils.user_generator import get_random_person
from aiogram.types import CallbackQuery
import asyncio
from aiogram.utils.chat_action import ChatActionSender
from create_bot import questions, bot

start_router = Router()


@start_router.message(CommandStart(), IsAdmin())
async def cmd_start(message: Message, command: CommandObject):
    command_args: str = command.args
    if command_args:
        await message.answer(
            f'–ó–∞–ø—É—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∫–æ–º–∞–Ω–¥–µ /start –∏—Å–ø–æ–ª—å–∑—É—è —Ñ–∏–ª—å—Ç—Ä CommandStart() —Å –º–µ—Ç–∫–æ–π <b>{command_args}</b>',
            reply_markup=main_kb(message.from_user.id))
    else:
        await message.answer(
            f'–ó–∞–ø—É—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∫–æ–º–∞–Ω–¥–µ /start –∏—Å–ø–æ–ª—å–∑—É—è —Ñ–∏–ª—å—Ç—Ä CommandStart() –±–µ–∑ –º–µ—Ç–∫–∏',
            reply_markup=main_kb(message.from_user.id))


@start_router.message(Command('start_2'), IsAdmin())
async def cmd_start(message: Message):
    await message.answer('–ó–∞–ø—É—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∫–æ–º–∞–Ω–¥–µ /start_2 –∏—Å–ø–æ–ª—å–∑—É—è —Ñ–∏–ª—å—Ç—Ä Command()',
                         reply_markup=create_spec_kb())


@start_router.message(F.text == '/start_3', IsAdmin())
async def cmd_start(message: Message):
    await message.answer('–ó–∞–ø—É—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∫–æ–º–∞–Ω–¥–µ /start_3 –∏—Å–ø–æ–ª—å–∑—É—è –º–∞–≥–∏—á–µ—Å–∫–∏–π —Ñ–∏–ª—å—Ç—Ä F.text!',
                         reply_markup=create_rat())


@start_router.message(F.text == '–î–∞–≤–∞–π –∏–Ω–ª–∞–π–Ω!', IsAdmin())
async def get_inline_btn_link(message: Message):
    await message.answer('–í–æ—Ç —Ç–µ–±–µ –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å—Å—ã–ª–∫–∞–º–∏!', reply_markup=ease_link_kb())


@start_router.message(F.text == '–î–∞–≤–∞–π –∏–Ω–ª–∞–π–Ω2', IsAdmin())
async def get_inline_btn_link(message: Message):
    await message.answer('–í–æ—Ç —Ç–µ–±–µ –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å—Å—ã–ª–∫–∞–º–∏!', reply_markup=get_inline_kb())


@start_router.callback_query(F.data == 'get_person', IsAdmin())
async def send_random_person(call: CallbackQuery):
    await call.answer('–ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    user = get_random_person()
    formatted_message = (
        f"üë§ <b>–ò–º—è:</b> {user['name']}\n"
        f"üè† <b>–ê–¥—Ä–µ—Å:</b> {user['address']}\n"
        f"üìß <b>Email:</b> {user['email']}\n"
        f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {user['phone_number']}\n"
        f"üéÇ <b>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:</b> {user['birth_date']}\n"
        f"üè¢ <b>–ö–æ–º–ø–∞–Ω–∏—è:</b> {user['company']}\n"
        f"üíº <b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {user['job']}\n"
    )
    await call.message.answer(formatted_message)


@start_router.callback_query(F.data == 'back_home', IsAdmin())
async def back_home(call: CallbackQuery):
    await call.answer()
    await call.message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å", reply_markup=main_kb(call.from_user.id))


@start_router.message(Command('faq'), IsAdmin())
async def cmd_start_2(message: Message):
    await message.answer('–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏', reply_markup=create_qst_inline_kb(questions))


@start_router.callback_query(F.data.startswith('qst_'), IsAdmin())
async def cmd_start(call: CallbackQuery):
    await call.answer()
    qst_id = int(call.data.replace('qst_', ''))
    qst_data = questions[qst_id]
    msg_text = f'–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å {qst_data.get("qst")}\n\n' \
               f'<b>{qst_data.get("answer")}</b>\n\n' \
               f'–í—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å:'
    async with ChatActionSender(bot=bot, chat_id=call.from_user.id, action="typing"):
        await asyncio.sleep(2)
        await call.message.answer(msg_text, reply_markup=create_qst_inline_kb(questions))


@start_router.message(Command("create_table"))
async def create_table(message: Message, command: CommandObject):
    try:
        command_split = command.args.split(":")[0].split(",")
        first_options = get_db_options(command_split[1:])
        command_split[2] = get_db_types(command_split[2])
        columns = [{'name': command_split[1], 'type': command_split[2]}]
        if first_options is not None:
            columns[0].update(first_options)

        other_records = command.args.split(":")[1:]
        for record in other_records:
            record_list: list = record.split(",")
            options = get_db_options(record_list)

            record_list[1] = get_db_types(record_list[1])

            if options is not None:
                columns.append({'name': record_list[0], 'type': record_list[1] | options})
            else:
                columns.append({'name': record_list[0], 'type': record_list[1]})
        await db_service.create_table(command_split[0], columns)
        await message.answer("–¢–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–ª–∞—Å—å!")
    except Exception as e:
        await message.answer(f'–¢–∞–±–ª–∏—Ü–∞ –Ω–µ —Å–æ–∑–¥–∞–ª–∞—Å—å: {e}')


@start_router.message(Command("create_table_help"))
async def create_table_help(message: Message):
    message_text = f"–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ /create_table \n\n" \
                   f"C –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ - –ò–º—è —Ç–∞–±–ª–∏—Ü—ã,–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏,–¢–∏–ø –∫–æ–ª–æ–Ω–∫–∏,–î–æ–ø –æ–ø—Ü–∏–∏:—Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–æ–∫–∞\n\n" \
                   f"–í–æ–∑–º–æ–∂–Ω—ã–µ —Ç–∏–ø—ã - Integer, String, TIMESTAMP"
    await message.answer(message_text)
